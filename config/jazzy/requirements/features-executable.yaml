# This requirements file is not perfect but it should be a useful starting point.
# It is intended to be copied into the saved requirements directory and then modified.
#
# This file was generated by 'make-executable-requirements-from-csv.ts'
# with data from 'executable-features.csv'.

requirements:
  - name: Executables in `quality_of_service_demo_cpp`
    labels:
      - executable
      - feature
    checks:
      - name: Check `lifespan`
        try:
          - stdin: ros2 run quality_of_service_demo_cpp lifespan
      - name: Check `liveliness`
        try:
          - stdin: ros2 run quality_of_service_demo_cpp liveliness
      - name: Check `deadline`
        try:
          - stdin: ros2 run quality_of_service_demo_cpp deadline
  - name: Executables in `quality_of_service_demo_py`
    labels:
      - executable
      - feature
    checks:
      - name: Check `lifespan`
        try:
          - stdin: ros2 run quality_of_service_demo_py lifespan
      - name: Check `liveliness`
        try:
          - stdin: ros2 run quality_of_service_demo_py liveliness
      - name: Check `deadline`
        try:
          - stdin: ros2 run quality_of_service_demo_py deadline
  - name: Executables in `lifecycle`
    labels:
      - executable
      - feature
    checks:
      - name: Check `lifecycle_demo_launch.py`
        try:
          - stdin: ros2 launch lifecycle lifecycle_demo_launch.py
  - name: Executables in `tf2_ros`
    labels:
      - executable
      - feature
    checks:
      - name: Check `tf2_echo`
        try:
          - stdin: ros2 run tf2_ros tf2_echo
      - name: Check `tf2_monitor`
        try:
          - stdin: ros2 run tf2_ros tf2_monitor
      - name: Check `static_transform_publisher`
        try:
          - stdin: ros2 run tf2_ros static_transform_publisher --frame-id world --child-frame-id map
  - name: Executables in `examples_rclcpp_minimal_publisher`
    labels:
      - executable
      - feature
    checks:
      - name: Check `publisher_lambda`
        try:
          - stdin: ros2 run examples_rclcpp_minimal_publisher publisher_lambda
      - name: Check `publisher_member_function`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_publisher
              publisher_member_function
      - name: Check `publisher_not_composable`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_publisher
              publisher_not_composable
  - name: Executables in `examples_rclcpp_minimal_subscriber`
    labels:
      - executable
      - feature
    checks:
      - name: Check `subscriber_lambda`
        try:
          - stdin: ros2 run examples_rclcpp_minimal_subscriber subscriber_lambda
      - name: Check `subscriber_member_function`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_subscriber
              subscriber_member_function
      - name: Check `subscriber_not_composable`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_subscriber
              subscriber_not_composable
  - name: Executables in `examples_rclcpp_minimal_service`
    labels:
      - executable
      - feature
    checks:
      - name: Check `service_main`
        try:
          - stdin: ros2 run examples_rclcpp_minimal_service service_main
  - name: Executables in `examples_rclcpp_minimal_client`
    labels:
      - executable
      - feature
    checks:
      - name: Check `client_main`
        try:
          - stdin: ros2 run examples_rclcpp_minimal_client client_main
  - name: Executables in `examples_rclcpp_minimal_composition`
    labels:
      - executable
      - feature
    checks:
      - name: Check `composition_composed`
        try:
          - stdin: ros2 run examples_rclcpp_minimal_composition composition_composed
      - name: Check `composition_publisher`
        try:
          - stdin: ros2 run examples_rclcpp_minimal_composition composition_publisher
      - name: Check `composition_subscriber`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_composition
              composition_subscriber
  - name: Executables in `examples_rclcpp_minimal_action_server`
    labels:
      - executable
      - feature
    checks:
      - name: Check `action_server_not_composable`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_action_server
              action_server_not_composable
      - name: Check `action_server_member_functions`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_action_server
              action_server_member_functions
  - name: Executables in `examples_rclcpp_minimal_action_client`
    labels:
      - executable
      - feature
    checks:
      - name: Check `action_client_not_composable`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_action_client
              action_client_not_composable
      - name: Check `action_client_not_composable_with_cancel`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_action_client
              action_client_not_composable_with_cancel
      - name: Check `action_client_not_composable_with_feedback`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_action_client
              action_client_not_composable_with_feedback
      - name: Check `action_client_member_functions`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_minimal_action_client
              action_client_member_functions
  - name: Executables in `examples_rclcpp_multithreaded_executor`
    labels:
      - executable
      - feature
    checks:
      - name: Check `multithreaded_executor`
        try:
          - stdin: >-
              ros2 run examples_rclcpp_multithreaded_executor
              multithreaded_executor
  - name: Executables in `examples_rclpy_minimal_action_server`
    labels:
      - executable
      - feature
    checks:
      - name: Check `server_defer`
        try:
          - stdin: ros2 run examples_rclpy_minimal_action_server server_defer
      - name: Check `server_not_composable`
        try:
          - stdin: >-
              ros2 run examples_rclpy_minimal_action_server
              server_not_composable
      - name: Check `server`
        try:
          - stdin: ros2 run examples_rclpy_minimal_action_server server
      - name: Check `server_queue_goals`
        try:
          - stdin: ros2 run examples_rclpy_minimal_action_server server_queue_goals
      - name: Check `server_single_goal`
        try:
          - stdin: ros2 run examples_rclpy_minimal_action_server server_single_goal
  - name: Executables in `examples_rclpy_minimal_action_client`
    labels:
      - executable
      - feature
    checks:
      - name: Check `client_cancel`
        try:
          - stdin: ros2 run examples_rclpy_minimal_action_client client_cancel
      - name: Check `client_not_composable`
        try:
          - stdin: >-
              ros2 run examples_rclpy_minimal_action_client
              client_not_composable
      - name: Check `client`
        try:
          - stdin: ros2 run examples_rclpy_minimal_action_client client
  - name: Executables in `examples_rclpy_minimal_publisher`
    labels:
      - executable
      - feature
    checks:
      - name: Check `publisher_local_function`
        try:
          - stdin: ros2 run examples_rclpy_minimal_publisher publisher_local_function
      - name: Check `publisher_member_function`
        try:
          - stdin: >-
              ros2 run examples_rclpy_minimal_publisher
              publisher_member_function
      - name: Check `publisher_old_school`
        try:
          - stdin: ros2 run examples_rclpy_minimal_publisher publisher_old_school
  - name: Executables in `examples_rclpy_minimal_subscriber`
    labels:
      - executable
      - feature
    checks:
      - name: Check `subscriber_lambda`
        try:
          - stdin: ros2 run examples_rclpy_minimal_subscriber subscriber_lambda
      - name: Check `subscriber_member_function`
        try:
          - stdin: >-
              ros2 run examples_rclpy_minimal_subscriber
              subscriber_member_function
      - name: Check `subscriber_old_school`
        try:
          - stdin: ros2 run examples_rclpy_minimal_subscriber subscriber_old_school
  - name: Executables in `examples_rclpy_minimal_client`
    labels:
      - executable
      - feature
    checks:
      - name: Check `client`
        try:
          - stdin: ros2 run examples_rclpy_minimal_client client
      - name: Check `client_async`
        try:
          - stdin: ros2 run examples_rclpy_minimal_client client_async
      - name: Check `client_async_member_function`
        try:
          - stdin: >-
              ros2 run examples_rclpy_minimal_client
              client_async_member_function
      - name: Check `client_async_callback`
        try:
          - stdin: ros2 run examples_rclpy_minimal_client client_async_callback
  - name: Executables in `examples_rclpy_minimal_service`
    labels:
      - executable
      - feature
    checks:
      - name: Check `service`
        try:
          - stdin: ros2 run examples_rclpy_minimal_service service
      - name: Check `service_member_function`
        try:
          - stdin: ros2 run examples_rclpy_minimal_service service_member_function
  - name: Executables in `examples_rclpy_executors`
    labels:
      - executable
      - feature
    checks:
      - name: Check `callback_group`
        try:
          - stdin: ros2 run examples_rclpy_executors callback_group
      - name: Check `composed`
        try:
          - stdin: ros2 run examples_rclpy_executors composed
      - name: Check `custom_callback_group`
        try:
          - stdin: ros2 run examples_rclpy_executors custom_callback_group
      - name: Check `custom_executor`
        try:
          - stdin: ros2 run examples_rclpy_executors custom_executor
      - name: Check `listener`
        try:
          - stdin: ros2 run examples_rclpy_executors listener
      - name: Check `talker`
        try:
          - stdin: ros2 run examples_rclpy_executors talker
  - name: Executables in `pendulum_control`
    labels:
      - executable
      - feature
      - linux
    checks:
      - name: Check `pendulum_demo`
        try:
          - stdin: ros2 run pendulum_control pendulum_demo
      - name: Check `pendulum_teleop`
        try:
          - stdin: ros2 run pendulum_control pendulum_teleop
      - name: Check `pendulum_logger`
        try:
          - stdin: ros2 run pendulum_control pendulum_logger
  - name: Executables in `tlsf_cpp`
    labels:
      - executable
      - feature
      - linux
    checks:
      - name: Check `tlsf_allocator_example`
        try:
          - stdin: ros2 run tlsf_cpp tlsf_allocator_example
  - name: Executables in `rttest`
    labels:
      - executable
      - feature
      - linux
    checks:
      - name: Run pendulum_demo to generate data
        try:
          - stdin: ros2 run pendulum_control pendulum_demo -f pendulum_demo_results
      - name: Check `rttest_plot`
        try:
          - stdin: ros2 run rttest rttest_plot -s pendulum_demo_results
  - name: Executables in `dummy_robot_bringup`
    labels:
      - executable
      - feature
    checks:
      - name: Check `dummy_robot_bringup_launch.py`
        try:
          - stdin: ros2 launch dummy_robot_bringup dummy_robot_bringup_launch.py
      - name: Check `dummy_robot_bringup_launch.xml`
        try:
          - stdin: ros2 launch dummy_robot_bringup dummy_robot_bringup_launch.xml
      - name: Check `dummy_robot_bringup_launch.yaml`
        try:
          - stdin: ros2 launch dummy_robot_bringup dummy_robot_bringup_launch.yaml
  - name: Executables in `rviz2`
    labels:
      - executable
      - feature
    checks:
      - name: Check `rviz2`
        try:
          - stdin: ros2 run rviz2 rviz2
  - name: Executables in gz vendor packages
    description: You will need to install the `desktop-full` or `simulation` variants before running this test.
    labels:
      - executable
      - feature
      - linux
    checks:
      - name: >-
          Check `gz sim -v4 shapes.sdf`
        try:
          - stdin: >-
              gz sim -v4 shapes.sdf
  - name: Executables in `rqt`
    labels:
      - executable
      - feature
    checks:
      - name: Check `rqt`
        try:
          - stdin: rqt
  - name: Executables in `rosbag2`
    labels:
      - executable
      - feature
    checks:
      - name: Check `ros2 bag record -a`
        try:
          - stdin: ros2 bag record -a
      - name: Check `ros2 bag record <topic1> <topic2> <topic3>`
        try:
          - stdin: ros2 bag record <topic1> <topic2> <topic3>
      - name: Check `ros2 bag info <bag_file>`
        try:
          - stdin: ros2 bag info <bag_file>
      - name: Check `ros2 bag play <bag_file>`
        try:
          - stdin: ros2 bag play <bag_file>
